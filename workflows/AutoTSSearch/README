## Description
This transition state search package uses molSimplify and Python to generate reaction intermediates from catalysts and substrates, runs geometry optimizations, runs bond-length scans, and runs orca Transition State optimizations. 

The "automated_ts_manual_ff.py" file shows how a workflow can be implemented to find the transition state for an oxo formation from a N2O substrate. A new, more general, example file will be created.

## Usage

structure_gen.py
This file can be seen as an extension to the molSimplify functions for transition metal structure generation. Some more basic functions, such as "find_vacant_site()", "define_best_orientation()", and many more, can be used and explored on their own. However, the most interesting function for transition state screening on this file is "insert_substrate()", where you provide the .xyz file you want to bind to a catalyst or reactant. A substrate-bound species will be generated with the best orientation possible, maintaining original bond angles.

terachem.py
This file's functions combine into "terachem_geo_opt()", which automates the process of running a terachem geometry optimization by creating an input file and job script, submitting the job either in slurm or sge, checks/sleeps until the optimization is completed, and, finally, checks if the calculation converged properly in terms of spin multimplicity, spin contamination, structure, and Mulliken population.

orca_bl_scan.py
This file's functions combine into "orca_bond_length_scan()", which automates the process for running and checking the job until completion, similar to the terachem function. The input to this function is the xyz file with a substrate bound (or not for bond breaking) and the atoms involved in the bond length scan. This function then checks the energy curve generated, plots it, and fits a curve to it using spline. A series of checks is conducted by the bond length scan by checking for more than one local maximum, not having a structure close enough to the maximum energy, or not having a local maximum over the bond length range. If one of the aforementioned checks fails, the code will rerun the bond length scan with a corrected range until a satisfactory guess for the transition state structure is generated.

orca_ts_opt.py
This file has a few relevant functions, "orca_geometry_optimization()", "orca_single_point_energy()", "orca_transition_state_optimization()". The geometry optimization function does the same as the terachem function, but using Orca. The single-point function simply runs a single-point orca calculation and extracts the Gibbs Free Energy. The transition state optimization function takes the guess structure generated by the bond length scan and automates running a TSopt calculation on Orca. A series of checks is implemented involving spin contamination, if the transition state modes involve the bond expected, and the vibrational frequency by checking there is only one and extracting that mode to an .xyz file for manual check. Lastly, the Gibbs Free Energy is extracted.

io_utils.py
This file simply has utility functions to read through output files, check job status, wait for jobs to finish, and submit jobs.